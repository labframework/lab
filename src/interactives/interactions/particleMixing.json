{
  "title": "Mixing Liquids",
  "publicationStatus": "public",
  "subtitle": "Explore how liquids mix at the molecular level.",
  "about": [
    "How is it possible to mix two liquids together and for them to take up less volume than ",
    "when they are separated? Does it always happen that the mixture takes up less space? How ",
    "does thinking about liquids as being made of small particles help us understand our observations?"
  ],
  "helpOnLoad": true,
  "aspectRatio": 0.9325,
  "fontScale": 0.9,
  "models": [
    {
      "type": "md2d",
      "id": "particleMixing$0",
      "url": "imports/legacy-mw-content/converted/interactions/mixing-liquids/particleMixing$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/mixing-liquids/particleMixing$0.mml",
      "viewOptions": {
        "controlButtons": ""
      },
      "onLoad": [
        "setComponentDisabled('add-columnB',false);",
        "setComponentDisabled('add-columnA',false);",
        "setComponentDisabled('cap-and-shake',true);",
        "setTextBoxProperties(1, {x: 3.5});",
        "setTextBoxProperties(3, {x: 1.225});",
        "setTextBoxProperties(4, {x: 2.425});",
        "set('indicesColumnA',[1,0]);",
        "set('indicesColumnB',[2,3]);",
        "set('indicesColumnC',[6,7,8]);",
        "set('indicesColumnD',[4,5,9]);",
        "setLineProperties([0,1,2,3],{lineColor: 'red'});",
        "start();",
        "var timeStepsPerTick = get('timeStepsPerTick'),",
        "    columnBIndices   = getAtomsWithinShape(get('indicesColumnB')[0]),",
        "    columnAIndices   = getAtomsWithinShape(get('indicesColumnA')[0]),",
        "    indicesColumnC   = get('indicesColumnC'),",
        "    indicesColumnD   = get('indicesColumnD'),",
        "    indicesColumnB   = get('indicesColumnB'),",
        "    indicesColumnA   = get('indicesColumnA'),",
        "    applyHeatBathToColumnB = true,",
        "    applyHeatBathToColumnA = true;",
        "callEvery(timeStepsPerTick,function(){",
        "  var nToDrop = getAtomsWithinShape(indicesColumnC[0]).length;",
        "  if (get('isColumnBDropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnB = false;",
        "    } else {",
        "      applyHeatBathToColumnB = true;",
        "      set('isColumnBDropping',false);",
        "      set('isColumnBDropped',true);",
        "      if (get('isColumnADropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnB,{visible: true});",
        "    }",
        "  }",
        "  if (get('isColumnADropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnA = false;",
        "    } else {",
        "      applyHeatBathToColumnA = true;",
        "      set('isColumnADropping',false);",
        "      set('isColumnADropped',true);",
        "      if (get('isColumnBDropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnA,{visible: true});",
        "    }",
        "  }",
        "  setTemperatureOfAtoms(columnBIndices, applyHeatBathToColumnB ? get('columnBTemp') : 150);",
        "  setTemperatureOfAtoms(columnAIndices, applyHeatBathToColumnA ? get('columnATemp') : 150);",
        "});"
      ]
    },
    {
      "type": "md2d",
      "id": "particleMixingDoubleEthanol$0",
      "url": "imports/legacy-mw-content/converted/interactions/mixing-liquids/particleMixingDoubleEthanol$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/mixing-liquids/particleMixingDoubleEthanol$0.mml",
      "viewOptions": {
        "controlButtons": ""
      },
      "onLoad": [
        "setComponentDisabled('add-columnB',false);",
        "setComponentDisabled('add-columnA',false);",
        "setComponentDisabled('cap-and-shake',true);",
        "set('indicesColumnA',[1,0]);",
        "set('indicesColumnB',[9,2]);",
        "set('indicesColumnC',[5,6,7]);",
        "set('indicesColumnD',[3,4,8]);",
        "setTextBoxProperties(1, {x: 3.5});",
        "setTextBoxProperties(4, {x: 2.425});",
        "setLineProperties([0,1,2,3],{lineColor: 'red'});",
        "start();",
        "var timeStepsPerTick = get('timeStepsPerTick'),",
        "    columnBIndices   = getAtomsWithinShape(get('indicesColumnB')[0]),",
        "    columnAIndices   = getAtomsWithinShape(get('indicesColumnA')[0]),",
        "    indicesColumnC   = get('indicesColumnC'),",
        "    indicesColumnD   = get('indicesColumnD'),",
        "    indicesColumnB   = get('indicesColumnB'),",
        "    indicesColumnA   = get('indicesColumnA'),",
        "    applyHeatBathToColumnB = true,",
        "    applyHeatBathToColumnA = true;",
        "callEvery(timeStepsPerTick,function(){",
        "  var nToDrop = getAtomsWithinShape(indicesColumnC[0]).length;",
        "  if (get('isColumnBDropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnB = false;",
        "    } else {",
        "      applyHeatBathToColumnB = true;",
        "      set('isColumnBDropping',false);",
        "      set('isColumnBDropped',true);",
        "      if (get('isColumnADropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnB,{visible: true});",
        "    }",
        "  }",
        "  if (get('isColumnADropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnA = false;",
        "    } else {",
        "      applyHeatBathToColumnA = true;",
        "      set('isColumnADropping',false);",
        "      set('isColumnADropped',true);",
        "      if (get('isColumnBDropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnA,{visible: true});",
        "    }",
        "  }",
        "  setTemperatureOfAtoms(columnBIndices, applyHeatBathToColumnB ? get('columnBTemp') : 150);",
        "  setTemperatureOfAtoms(columnAIndices, applyHeatBathToColumnA ? get('columnATemp') : 150);",
        "});"
      ]
    },
    {
      "type": "md2d",
      "id": "particleMixingDoubleWater$0",
      "url": "imports/legacy-mw-content/converted/interactions/mixing-liquids/particleMixingDoubleWater$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/mixing-liquids/particleMixingDoubleWater$0.mml",
      "viewOptions": {
        "controlButtons": ""
      },
      "onLoad": [
        "setComponentDisabled('add-columnB',false);",
        "setComponentDisabled('add-columnA',false);",
        "setComponentDisabled('cap-and-shake',true);",
        "set('indicesColumnA',[1,0]);",
        "set('indicesColumnB',[2,3]);",
        "set('indicesColumnC',[6,7,8]);",
        "set('indicesColumnD',[4,5,9]);",
        "setTextBoxProperties(1, {x: 3.5});",
        "setTextBoxProperties(3, {x: 1.225});",
        "setLineProperties([0,1,2,3],{lineColor: 'red'});",
        "start();",
        "var timeStepsPerTick = get('timeStepsPerTick'),",
        "    columnBIndices   = getAtomsWithinShape(get('indicesColumnB')[0]),",
        "    columnAIndices   = getAtomsWithinShape(get('indicesColumnA')[0]),",
        "    indicesColumnC   = get('indicesColumnC'),",
        "    indicesColumnD   = get('indicesColumnD'),",
        "    indicesColumnB   = get('indicesColumnB'),",
        "    indicesColumnA   = get('indicesColumnA'),",
        "    applyHeatBathToColumnB = true,",
        "    applyHeatBathToColumnA = true;",
        "callEvery(timeStepsPerTick,function(){",
        "  var nToDrop = getAtomsWithinShape(indicesColumnC[0]).length;",
        "  if (get('isColumnBDropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnB = false;",
        "    } else {",
        "      applyHeatBathToColumnB = true;",
        "      set('isColumnBDropping',false);",
        "      set('isColumnBDropped',true);",
        "      if (get('isColumnADropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnB,{visible: true});",
        "    }",
        "  }",
        "  if (get('isColumnADropping')) {",
        "    if (nToDrop > 0) {",
        "      applyHeatBathToColumnA = false;",
        "    } else {",
        "      applyHeatBathToColumnA = true;",
        "      set('isColumnADropping',false);",
        "      set('isColumnADropped',true);",
        "      if (get('isColumnBDropped')) setComponentDisabled('cap-and-shake',false);",
        "      setShapeProperties(indicesColumnC,{visible: false});",
        "      setShapeProperties(indicesColumnC.slice(1,3),{y: -10});",
        "      setShapeProperties(indicesColumnA,{visible: true});",
        "    }",
        "  }",
        "  setTemperatureOfAtoms(columnBIndices, applyHeatBathToColumnB ? get('columnBTemp') : 125);",
        "  setTemperatureOfAtoms(columnAIndices, applyHeatBathToColumnA ? get('columnATemp') : 125);",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "applyHeatBathToColumnB",
      "initialValue": true
    },
    {
      "name": "applyHeatBathToColumnA",
      "initialValue": true
    },
    {
      "name": "isColumnBDropped",
      "initialValue": false
    },
    {
      "name": "isColumnBDropping",
      "initialValue": false
    },
    {
      "name": "isColumnADropping",
      "initialValue": false
    },
    {
      "name": "isColumnADropped",
      "initialValue": false
    },
    {
      "name": "columnBTemp",
      "initialValue": 50
    },
    {
      "name": "columnATemp",
      "initialValue": 50
    },
    {
      "name": "indicesColumnB",
      "initialValue": [2,3]
    },
    {
      "name": "indicesColumnA",
      "initialValue": [1,0]
    },
    {
      "name": "indicesColumnC",
      "initialValue": [6,7,8]
    },
    {
      "name": "indicesColumnD",
      "initialValue": [4,5,9]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "add-columnB",
      "text": "Add second",
      "action": [
        "if ( !(get('isColumnBDropping') || get('isColumnADropping')) ) {",
        "  stop();",
        "  set('isColumnBDropping',true);",
        "  setComponentDisabled('add-columnB',true);",
        "  var dx = getShapeProperties(get('indicesColumnC')[0]).x - getShapeProperties(get('indicesColumnB')[0]).x,",
        "      dy = getShapeProperties(get('indicesColumnC')[0]).y - getShapeProperties(get('indicesColumnB')[0]).y,",
        "      atomIndices = getAtomsWithinShape(get('indicesColumnB')[0]),",
        "      targetMidX = getShapeProperties(get('indicesColumnC')[0]).x + getShapeProperties(get('indicesColumnC')[0]).width / 2,",
        "      targetMinX = getShapeProperties(get('indicesColumnC')[0]).x,",
        "      targetMaxX = getShapeProperties(get('indicesColumnC')[0]).x + getShapeProperties(get('indicesColumnC')[0]).width,",
        "      halfTargetWidth = 0.5 * getShapeProperties(get('indicesColumnC')[0]).width,",
        "      newX;",
        "  batch(function(){",
        "    setShapeProperties(get('indicesColumnB'),{visible: false});",
        "    setShapeProperties(get('indicesColumnC').slice(1,3),{y: 3.29});",
        "    setShapeProperties(get('indicesColumnC'),{visible: true});",
        "    for (var i = 0, ii = atomIndices[0]; i < atomIndices.length; ii = atomIndices[++i]) {",
        "      newX = getAtomProperties(ii).x + dx;",
        "      if (newX < targetMidX) {",
        "        newX = newX - ((newX - targetMidX)/halfTargetWidth)*0.1;",
        "      } else {",
        "        newX = newX - ((newX - targetMidX)/halfTargetWidth)*0.1;",
        "      }",
        "      setAtomProperties(ii, {x: newX} );",
        "      setAtomProperties(ii, {y: getAtomProperties(ii).y + dy} );",
        "    }",
        "  });",
        "  start();",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "add-columnA",
      "text": "Add first",
      "action": [
        "if ( !(get('isColumnADropped') || get('isColumnADropping') || get('isColumnBDropping')) ) {",
        "  stop();",
        "  set('isColumnADropping',true);",
        "  setComponentDisabled('add-columnA',true);",
        "  var dx = getShapeProperties(get('indicesColumnC')[0]).x - getShapeProperties(get('indicesColumnA')[0]).x,",
        "      dy = getShapeProperties(get('indicesColumnC')[0]).y - getShapeProperties(get('indicesColumnA')[0]).y,",
        "      atomIndices = getAtomsWithinShape(get('indicesColumnA')[0]),",
        "      targetMidX = getShapeProperties(get('indicesColumnC')[0]).x + getShapeProperties(get('indicesColumnC')[0]).width / 2,",
        "      targetMinX = getShapeProperties(get('indicesColumnC')[0]).x,",
        "      targetMaxX = getShapeProperties(get('indicesColumnC')[0]).x + getShapeProperties(get('indicesColumnC')[0]).width,",
        "      halfTargetWidth = 0.5 * getShapeProperties(get('indicesColumnC')[0]).width,",
        "      newX;",
        "  batch(function(){",
        "    setShapeProperties(get('indicesColumnA'),{visible: false});",
        "    setShapeProperties(get('indicesColumnC').slice(1,3),{y: 3.29});",
        "    setShapeProperties(get('indicesColumnC'),{visible: true});",
        "    for (var i = 0, ii = atomIndices[0]; i < atomIndices.length; ii = atomIndices[++i]) {",
        "      newX = getAtomProperties(ii).x + dx;",
        "      if (newX < targetMidX) {",
        "        newX = newX - ((newX - targetMidX)/halfTargetWidth)*0.1;",
        "      } else {",
        "        newX = newX - ((newX - targetMidX)/halfTargetWidth)*0.1;",
        "      }",
        "      setAtomProperties(ii, {x: newX} );",
        "      setAtomProperties(ii, {y: getAtomProperties(ii).y + dy} );",
        "    }",
        "  });",
        "  start();",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "cap-and-shake",
      "text": "Cap and shake",
      "disabled": true,
      "action": [
        "var i      = get('indicesColumnD'),",
        "    prop   = getShapeProperties(i[0]),",
        "    nAbove = atomsWithinRect(prop.x, prop.y + prop.height, prop.width, prop.height).length;",
        "if ( get('isColumnBDropped') && get('isColumnADropped') && nAbove === 0 ) {",
        "  setComponentDisabled('stop-shaking',false);",
        "  setShapeProperties(i[2], {y: prop.y + prop.height});",
        "  set('columnBTemp',5000);",
        "  set('columnATemp',5000);",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "stop-shaking",
      "text": "Stop shaking",
      "disabled": true,
      "action": [
        "set('columnBTemp',50);",
        "set('columnATemp',50);",
        "callAt( get('time') + 1000, function() {",
        "  setShapeProperties(get('indicesColumnD')[2], {y: -10});",
        "  setComponentDisabled('stop-shaking',true);",
        "});"
      ]
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": [
        "reload();"
      ]
    },
    {
      "type": "text",
      "id": "label-select-model",
      "text": "**Select liquids**"
    },
    {
      "type": "radio",
      "id": "select-model",
      "orientation": "horizontal",
      "options": [
        {
          "text": "Water + Ethanol",
          "loadModel": "particleMixing$0",
          "selected": true
        },
        {
          "text": "Ethanol + Ethanol",
          "loadModel": "particleMixingDoubleEthanol$0"
        },
        {
          "text": "Water + Water",
          "loadModel": "particleMixingDoubleWater$0"
        }
      ]
    }
  ],
  "helpTips": [
    {
      "text": [
        "#Mixing Liquids",
        "- - -",
        "Experiment with mixing liquids and observing the volume (amount of space) they take up."
      ]
    },
    {
      "component": "select-model",
      "text":  "First select a pair of liquids to combine, and then note the volume of each liquid."
    },
    {
      "component": "add-columnA",
      "text": "Add one liquid to the mixing cylinder."
    },
    {
      "component": "add-columnB",
      "text": "Then add the second liquid to the mixing cylinder and note the volume."
    },
    {
      "component": "cap-and-shake",
      "text": "Shake the liquids up."
    },
    {
      "component": "stop-shaking",
      "text": "Then stop mixing the liquids and note the volume."
    }
  ],
  "layout": {
    "bottom": [
      ["label-select-model"],
      ["select-model"],
      ["add-columnA", "add-columnB", "cap-and-shake", "stop-shaking", "reset"]
    ]
  },
  "template": [
    {
      "id": "bottom",
      "width": "model.width",
      "left": "model.left",
      "top": "model.bottom",
      "align": "center"
    }
  ]
}
